<?php

namespace app\models\graphic;

use app\components\File;
use Yii;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "graphic_material".
 *
 * @property int $id
 * @property string $data
 * @property int $weight
 * @property int $type
 */
class GraphicMaterial extends \yii\db\ActiveRecord
{
    const SCREENSHOT_BACKGROUND = 1;
    const SCREENSHOT_TEXT = 2;
    const SCREENSHOT_EFFECT = 3;
    const SCREENSHOT_BORDER = 4;
    const ICON_BACKGROUND = 5;
    const ICON_EFFECT = 6;
    const ICON_BORDER = 7;

    const TEMPLATE_STORAGE_URL = '/storage/graphic/material/template/';

    private $file;
    public $path;
    public $name;
    public $flag;

    private $allowedTypes = ['png'];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'graphic_material';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['data', 'weight', 'type'], 'required'],
            [['data'], 'safe'],
            [['weight', 'type'], 'integer'],
            [['file'], 'file', 'extensions' => 'png', 'mimeTypes' => 'image/png', 'skipOnEmpty' => true, 'skipOnError' => true],
            ['file', 'validateFile', 'skipOnEmpty' => false, 'skipOnError' => false],
            ['flag', 'boolean']
        ];
    }

    public function validateFile($attribute)
    {
        if(!empty($this->{$attribute})) { return true; }
        if(empty(json_decode($this->data)->path)) {
            $this->addError($attribute, 'File cannot be blank');
        }
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'data' => Yii::t('app', 'Data'),
            'weight' => Yii::t('app', 'Weight'),
            'type' => Yii::t('app', 'Type'),
            'file' => Yii::t('app', 'File'),
        ];
    }

    public function beforeSave($insert)
    {
        if($this->file) {
            $savedFile = (new File(self::TEMPLATE_STORAGE_URL))->uploadFile($this->file, $this->allowedTypes);
        }else{
            $savedFile = (object)['path' => json_decode($this->oldAttributes['data'])->path, 'original_name' => json_decode($this->oldAttributes['data'])->name];
        }
        if($savedFile) {
            $data['path'] = $savedFile->path;
            $data['name'] = $savedFile->original_name;
            $data['flag'] = $this->flag;
            $this->data = json_encode($data);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function setFile()
    {
        $this->file = UploadedFile::getInstance($this, 'file');
    }

    public function getFile()
    {
        return $this->file;
    }

    public static function getTypeList()
    {
        return [
            self::SCREENSHOT_BACKGROUND => Yii::t('app', 'Подложка скриншота'),
            self::SCREENSHOT_TEXT => Yii::t('app', 'Скролл надпись скриншота'),
            self::SCREENSHOT_EFFECT => Yii::t('app', 'Изображение эффекта скриншота'),
            self::SCREENSHOT_BORDER => Yii::t('app', 'Рамка скриншота'),
            self::ICON_BACKGROUND => Yii::t('app', 'Подложка иконки'),
            self::ICON_EFFECT => Yii::t('app', 'Изображение эффекта иконки'),
            self::ICON_BORDER => Yii::t('app', 'Рамка иконки'),
        ];
    }

    public static function getScreenshotTemplateList($type)
    {
        $templates = self::find()->where(['type'=> $type])->all();
        $list = [];
        if(!empty($templates)){
            foreach ($templates as $template){
                $list[$template->id] = json_decode($template->data)->name;
            }
        }
        return $list;
    }

    public function isCheckboxNeeded()
    {
        $showForTypes = [self::SCREENSHOT_BACKGROUND, self::SCREENSHOT_TEXT, self::SCREENSHOT_BORDER];

        return in_array($this->type, $showForTypes);
    }
}
