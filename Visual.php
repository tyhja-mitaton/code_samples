<?php

namespace app\models\graphic;

use app\components\File;
use Yii;
use app\models\user\User;
use yii\behaviors\TimestampBehavior;
use yii\helpers\FileHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "graphic_visual".
 *
 * @property int $id
 * @property string $user_id
 * @property string $source_file
 * @property string $unique_file
 * @property string $border_file
 * @property string $glint_file
 * @property int $created_at
 *
 * @property User $user
 */
class Visual extends \yii\db\ActiveRecord
{
    const FILE_SOURCE_STORAGE_URL = '/storage/graphic/visual/source/';
    const FILE_BORDER_STORAGE_URL = '/storage/graphic/visual/border/';
    const FILE_GLINT_STORAGE_URL = '/storage/graphic/visual/glint/';
    const FILE_UNIQUE_STORAGE_URL = '/storage/graphic/visual/unique/';

    const GLINT_RATIO = 0.2; //размер блика относительно исходного изображения
    const GLINT_MIN = 3; //минимальное кол-во бликов
    const GLINT_MAX = 8; //максимальное кол-во бликов

    const DEFAULT_EXTENSION = 'jpg';

    private $sourceFile;
    private $borderFile;
    private $glintFile;

    private $allowedTypeBorders = ['png'];
    private $allowedTypeGlints = ['png'];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'graphic_visual';
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    self::EVENT_BEFORE_INSERT => ['created_at'],
                    self::EVENT_BEFORE_UPDATE => null,
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id'], 'integer'],
            [['source_file', 'unique_file', 'border_file', 'glint_file'], 'string', 'max' => 255],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
            [['sourceFile', 'borderFile', 'glintFile'], 'file', 'extensions' => 'gif, jpg, png', 'checkExtensionByMimeType' => false],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'user_id' => Yii::t('app', 'User'),
            'source_file' => Yii::t('app', 'Source File'),
            'unique_file' => Yii::t('app', 'Unique File'),
            'created_at' => Yii::t('app', 'Created At'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function beforeSave($insert)
    {
        $savedSourceFileResult = $this->getSavedFile('sourceFile', self::FILE_SOURCE_STORAGE_URL);
        $savedBorderFileResult = $this->getSavedFile('borderFile', self::FILE_BORDER_STORAGE_URL);
        $savedGlintFileResult = $this->getSavedFile('glintFile', self::FILE_GLINT_STORAGE_URL);

        static $filePath;
        $this->clearOnDelete('source_file', $filePath);
        $this->clearOnDelete('border_file', $filePath);
        $this->clearOnDelete('glint_file', $filePath);

        if($savedSourceFileResult && !$filePath) {
            $this->source_file = $savedSourceFileResult->path;
            $imagick = new \Imagick(Yii::getAlias('@webroot') . $savedSourceFileResult->path);
            if($savedBorderFileResult) {
                $this->border_file = $savedBorderFileResult->path;
                $this->mergeBorder($imagick, $savedBorderFileResult);
            }
            if($savedGlintFileResult) {
                $this->glint_file = $savedGlintFileResult->path;
                $this->mergeGlint($imagick, $savedGlintFileResult);
            }
            $uniqueFileName = Yii::$app->security->generateRandomString(35) . "." . $this->getSourceExtension();

            $directoryPath = Yii::getAlias('@webroot') . self::FILE_UNIQUE_STORAGE_URL;
            if (!file_exists($directoryPath)) {
                FileHelper::createDirectory($directoryPath, $mode = 0755, $recursive = true);
            }

            $imagick->writeImage($directoryPath . $uniqueFileName);

            $this->unique_file = self::FILE_UNIQUE_STORAGE_URL . $uniqueFileName;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function setSourceFile()
    {
        $this->sourceFile = UploadedFile::getInstance($this, 'sourceFile');
    }

    public function getSourceFile()
    {
        return $this->sourceFile;
    }

    public function setBorderFile()
    {
        $this->borderFile = UploadedFile::getInstance($this, 'borderFile');
    }

    public function getBorderFile()
    {
        return $this->borderFile;
    }

    public function setGlintFile()
    {
        $this->glintFile = UploadedFile::getInstance($this, 'glintFile');
    }

    public function getGlintFile()
    {
        return $this->glintFile;
    }
    
    public function deleteImage($attribute)
    {
        if($this->hasAttribute($attribute)) {
            $this->{$attribute} = null;
            $this->save(false, ["$attribute"]);
        }
    }

    private function mergeBorder(\Imagick $imagick, $savedBorderFileResult)
    {
        $imagickBorder = new \Imagick(Yii::getAlias('@webroot') . $savedBorderFileResult->path);
        $draw = new \ImagickDraw();
        $draw->composite(\Imagick::COMPOSITE_DISSOLVE, 0, 0, $imagick->getImageWidth(), $imagick->getImageHeight(), $imagickBorder);
        $imagick->drawImage($draw);
    }

    private function mergeGlint(\Imagick $imagick, $savedGlintFileResult)
    {
        $imagickGlint = new \Imagick(Yii::getAlias('@webroot') . $savedGlintFileResult->path);
        $draw = new \ImagickDraw();
        $glintWidth = $imagickGlint->getImageWidth() / $imagick->getImageWidth() > self::GLINT_RATIO ? $imagick->getImageWidth() * self::GLINT_RATIO : $imagickGlint->getImageWidth();
        $glintHeight = $imagickGlint->getImageHeight() / $imagick->getImageHeight() > self::GLINT_RATIO ? $imagick->getImageHeight() * self::GLINT_RATIO: $imagickGlint->getImageHeight();
        $glintNumber = random_int(self::GLINT_MIN, self::GLINT_MAX);
        for($i = 0; $i < $glintNumber; $i++) {
            $coordX = random_int(0, $imagick->getImageWidth()) - $glintWidth/2;
            $coordY = random_int(0, $imagick->getImageHeight()) - $glintHeight/2;
            $draw->composite(\Imagick::COMPOSITE_DISSOLVE, $coordX, $coordY, $glintWidth, $glintHeight, $imagickGlint);
        }
        $imagick->drawImage($draw);
    }

    private function getSourceExtension()
    {
        $matches = [];
        if(!empty($this->source_file)) {
            if(!preg_match('/([^.]*)$/', $this->source_file, $matches)){
                $matches[] = self::DEFAULT_EXTENSION;//перестраховка
            }
        }
        return $this->sourceFile ? $this->sourceFile->extension : $matches[0];
    }

    private function getSavedFile($attribute, $path)
    {
        $pieces = preg_split('/(?=[A-Z])/',$attribute);
        array_walk($pieces, function (&$item){$item = strtolower($item);});
        $field = implode('_', $pieces);

        if($this->{$attribute}) {
            $savedFileResult = (new File($path))->uploadImage($this->{$attribute});
        } elseif (isset($this->oldAttributes[$field])) {
            $savedFileResult = (object)['path' => $this->oldAttributes[$field], 'original_name' => null];
        } else {
            return NULL;
        }

        return $savedFileResult;
    }

    private function clearOnDelete($field, &$filePath)
    {
        if (array_key_exists($field, $this->dirtyAttributes) && isset($this->oldAttributes[$field])) {
            $filePath = $this->oldAttributes[$field];

            if ($filePath && file_exists(\Yii::$app->basePath . '/web/' . $filePath)) {
                unlink(\Yii::$app->basePath . '/web/' . $filePath);
            }
        }
    }
}
